;asembly kodu 3 bölüme ayrılır data section, text section, bss section
;data section değer atanmış değişkenlerin tutulduğu yerdir
;bss section ise değer atanmamış  değişkenlerin tanımlandığı yerdir
;--------------------------------
;nasm -g  -f elf64 1_program_format.asm -l 1_programlist.lst
;nasm -g -f elf64 1_program.asm (-g parametresi debugger okusun diye konulur)
;ld -g 1_program.o -o ilk (-g parametresi debugger ...)
section .data
;------->>>Macro tanımlaması
EXIT_SUCCESS equ 0; program başarılı bir şekilde sonlandı
SYS_EXIT    equ 60; programın sonlanması için gerekli sistem çağrısı kodu

;------->>>Byte (8 bit) değişken tanımlanması
bVar1   db      17	;list çıktısındaki en soldaki satır kodu
bVar2   db      9	;yanındakki relative adres yani çalışmadan önceki adresi
bResult db      0	;relative adres her byte için 1 artar yani word için 2 birim artar
					;onun yanındaki değer ise çipin anlayacağı komutlardır shell gibin

;------->>>Word (16 bit) değişken tanımlanmasi
wVar1   dw      17000
wVar2   dw      9000
wResult dw      0

;------->>>double word (32 bit) değişken tanımlanmasi
dVar1   dd      17000000
dVar2   dd      9000000
dResult dd      0

;------->>>quad-word (64 bit) değişken tanımlanmsi
qVar1   dq      17000000000
qVar2   dq      9000000000
qResult dq      0

;*****************************
;***CODE SECTİON***

section .text
global _start
_start:
;       bResult= bVar1 + bVar2
        mov al, byte [bVar1]
        add al, byte [bVar2]
        mov byte [bResult], al

;       wResult= wVar1 + wVar2
        mov ax, word [wVar1]
        add ax, word [wVar2]
        mov word [wResult], ax
        
;       dResult=dVar1 + dVar2
        mov eax, dword [dVar1]
        add eax, dword [dVar2]
        mov dword [dResult], eax

;       qResult= qVar1 + qVar2
        mov rax, qword [qVar1]
        add rax, qword [qVar2]
        mov qword [qResult], rax
last:
        mov rax, SYS_EXIT
        mov rdi, EXIT_SUCCESS
        syscall

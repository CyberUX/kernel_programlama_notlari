;komutların tanıtımı

section .data
bVal1   db  11
bVal2   db  14
bSon    db  0

bDeg1	db	8
bDeg2	db	6

wVal1   dw  1355
wVal2   dw  2367
wSon    dw  0

dVal1   dd  68567
dVal2   dd  66322
dSon    dd  0

bBolSay dw  200
bBolen  db  -80
bBolum  db  0
bKalan  db  0

qVal1   dq  1256780
qVal2   dq  3500000
qSon    dq  0
qSonCarp    dq  0
section .text
global _start
_start:
    mov al, byte [bVal1];
    add al, byte [bVal2];
    mov byte [bSon], al;
    
    mov ax, word [wVal1];
    sub ax, word [wVal2];
    mov word [wSon], ax;
    
    mov eax, dword [dVal1];
    add eax, dword [dVal2];
    mov dword [dSon], eax;
    
    mov rax, qword [qVal1]
    sub rax, qword [qVal2];
    mov qword[qSon], rax;
    
    mov rax, qword [qVal1]; ah:al   dx:ax   edx:eax rax:rdx artan sonuçlar registerin üst
    mul qword [qVal2]; değeriyle birlikte tutulur.
    mov qword[qSonCarp], rax;çarpma işleminin sonucu normal boyuttan fazla olacağından yüksek değerde mov qword[qSonCarp + 8], rdx; depolanır rax:rdx şeklinde olur.
                                ; adresler byte byte artığı için 8 byte lık adres sonrasına yaz diyoz

    mov ax, 0	
    mov ax, word[bBolSay]	; bölme işleminde bölünecek sayı rax registerının yerlerine atılır
    idiv byte [bBolen]		; bölen sayı bölünen sayıdan küçük olmak zorundadır yanı bölünen 32 bit ise bölüm 16 veya 8 
    mov byte [bBolum], al	; bolum rax ın ilgili alt bitlerine eax,ax,al
    mov byte [bKalan], ah	; kalan rax ın iligili üst bitlerine edx,dx,ah atılır.
   
    mov al, byte[bDeg1]
    and al, byte[bDeg2]
    or al, byte[bDeg1]
    not [bDeg1]
    xor ax, byte[bDeg1]
    
    mov cl, 3   ;cl registeriyla kaydırma işlemleri yapılabilir ancak alacağı değer 0 64 arsında olmalıdır
    mov rax, 20 
    shl rax, cl ; shift logical left kaydırma yani değer kadar ilgili yöne kaydırır boşalan yerler 0 olur
    shr rax, 3  ; right
    sal rax, cl ; shift artitmetic left boşalan yere 1 ler gelir
    sar rax, 4
    rol rax, cl ; rotate left ilgili birim kadar döndürür. yani baştaki bitler sona gelir
    ror rax, 4
    
	
    inc rax;
    inc qword [qSon];
    dec dword [wSon];
    
    mov rax, 60
    mov rdi, 0
    syscall
